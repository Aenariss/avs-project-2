Architektury Výpočetních Systémů (AVS 2022)
Projekt č. 2 (PMC)
Login: xfiala61

Úloha 1: Paralelizace původního řešení
===============================================================================

1) Kterou ze smyček (viz zadání) je vhodnější paralelizovat a co způsobuje 
   neefektivitu paralelizaci té druhé?

   Vhodnější je paralelizovat nejvíce vnější smyčku, tzn. smyčku ve funkci marchCubes 
   procházející přes celý 3D prostor.
   Neefektivita paralelizace druhé smyčky je způsobena tím, že je paralelizována
   pouze malá část kódu, kde režie paralelizace je větší, než její efektivita,
   a velká část kódu stále beží sekvenčně.

2) Jaké plánování (rozdělení práce mezi vlákna) jste zvolili a proč? 
   Jaký vliv má velikost "chunk" při dynamickém plánování (8, 16, 32, 64)?
   
   Zvolil jsem statické dělení (schedule(static)), protože nepředpokládám, že by
   v rychlosti, jakou jednotlivá vlákna zpracují svoji část, byl výrazný rozdíl. 
   Stejně tak jsem nezvolil žádný chunk size, neboť stačí výchozí rozdělení podle 
   počtu vláken.

   Velikost chunku určuje, kolik iterací každé vlákno provede. Čím nižší hodnota,
   tím častěji bude nutné řešit přidělování práce vláknům a tím pádem bude vyšší režie.
   Se zmíněnými hodnotami to znamená, že každé vlákno provede 8,16,32 či 64 iterací, 
   než si zažádá o další. V tomto konkrétním případě jsem rozdíl v rychlosti při 
   použití zmíněných velikostí chunku nezaznamenal.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?

   Za pomoci pragmy omp critical, která zajistí, že ukládání trojúhelníků bude
   prováděno v rámci kritické sekce, tzn. ukládat je může vždy pouze 1 vlákno a 
   ostatní musí čekat. Není nutné zajišťovat pořadí, v jakém jsou ukládány,
   takže lze použít pouze tuto pragmu.


Úloha 2: Paralelní průchod stromem
===============================================================================

1) Stručně popište použití OpenMP tasků ve vašem řešení.

   Tasky jsou přidávány na jediném místě, a to v rekurzivní funkci tree(), která
   volá samu sebe na 8 validních podstromů. Každé toto volání je součástí nového tasku.

2) Jaký vliv má na vaše řešení tzv. "cut-off"? Je vhodné vytvářet nový 
   task pro každou krychli na nejnižší úrovni?

   Kontrola cut-off hodnoty určuje, na jaké úrovni se nacházejí listy stromu.
   Podle času, jak dlouho výpočet trvá, není vytváření nových tasků pro každou krychli 
   vhodné.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?

   Za pomoci pragmy omp critical, obdobně jako v předchozí úloze.

Úloha 3: Grafy škálování všech řešení
===============================================================================

1) Stručně zhodnoťte efektivitu vytvořených řešení (na základě grafů škálování).

   Stromový algoritmus je málo efektivní při malém vstupu a vysokém počtu výpočetních 
   vláken. 
   Paralelizace původní smyčky je, i na menším vstupu, s přibývajícím počtem vláken
   efektivnější než stromové řešení (ale stále pomalejší). Přestává být efektivní,
   když je vláken vzhledem k velikosti vstupu příliš.

   Obecně je stromový algoritmus rychlejší než paralelizace původního řešení. Dále jsou také
   oba algoritmy se zvětšujícím se vstupem a rostoucím počtem vláken efektivnější.

   Oba algoritmy dobře mají přijatelné silné škálování do 16 vláken, potom, s 32 vlákny, 
   jejich efektivita rapidně klesá a je ve většině případů nižší, než kdy je jádro jen 1, 
   z důvodu vysoké režie paralelizace (testovací vstupy jsou nejspíš přiliš malé, aby se 
   vlákna efektivně využila). Při příliš malých vstupech se čas výpočtu v případě
   stromového algoritmu s rostoucím počtem vláken nesnižuje.

2) V jakém případě (v závislosti na počtu bodů ve vstupním souboru a velikosti 
   mřížky) bude vaše řešení 1. úlohy neefektivní? (pokud takový případ existuje)

   Bude neefektivní, když bude malý vstup, ale příliš mnoho výpočetních vláken.

3) Je (nebo není) stromový algoritmus efektivnější z pohledu slabého škálování 
   vzhledem ke vstupu?

   Není efektivnější, neboť při malém vstupu se společně s vyšším počtem vláken
   zvyšuje i doba výpočtu.
   U paralelizované smyčky (1. úloha) se naopak (až do určitého limitu) s 
   přibývajícími vlákny doba výpočtu snižuje nebo příliš nemění.

4) Jaký je rozdíl mezi silným a slabým škálováním?

   Silná škálování vychází z Amdahlova zákona a zobrazuje, jak se mění doba výpočtu 
   v závislosti na rostoucím počtu výpočetních vláken (obecně pro vstup velikosti N).
   Ideální křivka silného škálování je klesající přímka, která znamená, že s více jádry
   jsme schopni problém vyřešit rychleji (tzn. 2x více jader -- 2x rychlejší, bohužel obvykle
   nereálné).

   Slabé škálování vychází z Gustafsonova zákona a zobrazuje, jak se mění doba výpočtu
   v závislosti na velikosti vstupu pro každé vlákno.
   Ideální křivkou slabého škálování je rovná čára, tedy přímka rovnoběžná s osou X, 
   která značí, že s vyšším počtem vláken (a tedy větším vstupem) je doba výpočtu stále
   stejná.

Úloha 4: Analýza využití jader pomocí VTune
================================================================================

1) Jaké bylo průměrné využití jader pro všechny tři implementace s omezením na 
   18 vláken? Na kolik procent byly využity?
   
   ref: 2.8 %
   loop: 47.7 %
   tree: 44.3 %

2) Jaké bylo průměrné využití jader pro všechny tři implementace s využitím 
   všech jader? Na kolik procent se podařilo využít obě CPU?
   
   ref: 2.8 %
   loop: 81.1 %
   tree: 75.3 %

3) Jaké jsou závěry z těchto měření?
   
   Obě řešení jsou oproti referenční implementaci výrazně efektivnější.
   S vyšším počtem jader roste také jejich využití. 
   Stromový algoritmus je oproti paralelizaci původní smyčky méně efektivní 
   ve využívání jader.