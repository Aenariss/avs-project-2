Architektury Výpočetních Systémů (AVS 2022)
Projekt č. 2 (PMC)
Login: xfiala61

Úloha 1: Paralelizace původního řešení
===============================================================================

1) Kterou ze smyček (viz zadání) je vhodnější paralelizovat a co způsobuje 
   neefektivitu paralelizaci té druhé?

   Vhodnější je paralelizovat nejvíce vnější smyčku, tzn. smyčku ve funkci marchCubes 
   procházející přes celý 3D prostor.
   Neefektivita paralelizace druhé smyčky je způsobena tím, že je paralelizována
   pouze malá část kódu, kde režie paralelizace je větší, než její efektivita,
   a velká část kódu stále beží sekvenčně.

2) Jaké plánování (rozdělení práce mezi vlákna) jste zvolili a proč? 
   Jaký vliv má velikost "chunk" při dynamickém plánování (8, 16, 32, 64)?
   
   Zvolil jsem statické dělení (schedule(static)), protože nepředpokládám, že by
   v rychlosti, jakou jednotlivá vlákna zpracují svoji část, byl výrazný rozdíl. 
   Stejně tak jsem nezvolil žádný chunk size, neboť stačí výchozí rozdělení podle 
   počtu vláken.

   Velikost chunku určuje, kolik iterací každé vlákno provede. Čím nižší hodnota,
   tím častěji bude nutné řešit přidělování práce vláknům a tím pádem bude vyšší režie.
   Se zmíněnými hodnotami to znamená, že každé vlákno provede 8,16,32 či 64 iterací, 
   než si zažádá o další. V tomto konkrétním případě jsem rozdíl v rychlosti při 
   použití zmíněných velikostí chunku nezaznamenal.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?

   Za pomoci pragmy omp critical, která zajistí, že ukládání trojúhelníků bude
   prováděno v rámci kritické sekce, tzn. ukládat je může vždy pouze 1 vlákno a 
   ostatní musí čekat. Není nutné zajišťovat pořadí, v jakém jsou ukládány,
   takže lze použít pouze tuto pragmu.


Úloha 2: Paralelní průchod stromem
===============================================================================

1) Stručně popište použití OpenMP tasků ve vašem řešení.

   Tasky jsou přidávány na jediném místě, a to v rekurzivní funkci tree(), která
   volá samu sebe na 8 validních podstromů. Každé toto volání je součástí nového tasku.

2) Jaký vliv má na vaše řešení tzv. "cut-off"? Je vhodné vytvářet nový 
   task pro každou krychli na nejnižší úrovni?

   Kontrola cut-off hodnoty určuje, na jaké úrovni se nacházejí listy stromu.
   Podle času, jak dlouho výpočet trvá, není vytváření nových tasků pro každou krychli 
   vhodné.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?

   Za pomoci pragmy omp critical, obdobně jako v předchozím příkladu.

Úloha 3: Grafy škálování všech řešení
===============================================================================

1) Stručně zhodnoťte efektivitu vytvořených řešení (na základě grafů škálování).

2) V jakém případě (v závislosti na počtu bodů ve vstupním souboru a velikosti 
   mřížky) bude vaše řešení 1. úlohy neefektivní? (pokud takový případ existuje)

3) Je (nebo není) stromový algoritmus efektivnější z pohledu slabého škálování 
   vzhledem ke vstupu?

4) Jaký je rozdíl mezi silným a slabým škálováním?

Úloha 4: Analýza využití jader pomocí VTune
================================================================================

1) Jaké bylo průměrné využití jader pro všechny tři implementace s omezením na 
   18 vláken? Na kolik procent byly využity?
   
   ref:
   loop:
   tree:

2) Jaké bylo průměrné využití jader pro všechny tři implementace s využitím 
   všech jader? Na kolik procent se podařilo využít obě CPU?
   
   ref:
   loop:
   tree:

3) Jaké jsou závěry z těchto měření?
